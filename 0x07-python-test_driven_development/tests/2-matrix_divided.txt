import unittest


class TestMatrixDivided(unittest.TestCase):
    def test_matrix_divided_valid_input(self):

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        div = 2
        result = matrix_divided(matrix, div)
        expected_result = [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0], [3.5, 4.0, 4.5]]
        self.assertEqual(result, expected_result)

def test_matrix_divided_invalid_matrix(self):
invalid_matrix = "not a matrix"
        div = 2
        with self.assertRaises(TypeError) as context:
            matrix_divided(invalid_matrix, div)
        self.assertEqual(
            str(context.exception),
            "matrix must be a matrix (list of lists) of integers/floats"
        )

def test_matrix_divided_rows_not_same_size(self):
invalid_matrix = [[1, 2, 3], [4, 5], [6, 7, 8]]
        div = 2
        with self.assertRaises(TypeError) as context:
            matrix_divided(invalid_matrix, div)
        self.assertEqual(
            str(context.exception),
            "Each row of the matrix must have the same size"
        )

def test_matrix_divided_invalid_div(self):
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        invalid_div = "not a number"
        with self.assertRaises(TypeError) as context:
            matrix_divided(matrix, invalid_div)
        self.assertEqual(
            str(context.exception),
            "div must be a number"
        )

def test_matrix_divided_division_by_zero(self):
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        div = 0
        with self.assertRaises(ZeroDivisionError) as context:
            matrix_divided(matrix, div)
        self.assertEqual(
            str(context.exception),
            "division by zero"
        )

if __name__ == '__main__':
    unittest.main()
